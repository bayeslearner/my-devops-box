---
# Local custom vars
tasks_dir: "{{ playbook_dir }}/api/tasks"
release_web_path: "{{ ansistrano_release_path.stdout }}/public"
release_logs_path: "{{ ansistrano_release_path.stdout }}/var/log"

# Ansistrano vars
ansistrano_before_setup_tasks_file: "{{ tasks_dir }}/before-setup.yml"
ansistrano_after_update_code_tasks_file: "{{ tasks_dir }}/after-update-code.yml"

ansistrano_deploy_to: "/opt/rgsupv-core" # Base path to deploy to.
ansistrano_version_dir: "releases" # Releases folder name
ansistrano_current_dir: "current" # Softlink name. You should rarely changed it.
ansistrano_current_via: "symlink" 
ansistrano_keep_releases: 2 # Releases to keep after a new deployment. See "Pruning old releases".

# Shared paths and basedir shared files creation.
# By default the shared paths directories and base directories for shared files are created automatically if not exists. But in some scenarios those paths could be symlinks to another directories in the filesystem, and the deployment process would fails. With these variables you can disable the involved tasks. If you have two or three shared paths, and don't need creation only for some of them, you always could disable the automatic creation and add a custom task in a hook.
ansistrano_ensure_shared_paths_exist: yes
ansistrano_ensure_basedirs_shared_files_exist: yes
ansistrano_allow_anonymous_stats: no

# Arrays of directories and files to be shared.
# The following arrays of directories and files will be symlinked to the current release directory after the 'update-code' step and its callbacks
# Notes:
# * Paths are relative to the /shared directory (no starting /)
# * If your items are in a subdirectory, write the entire path to each shared directory
#
# Example:
# ansistrano_shared_paths:
#   - path/to/first-dir
#   - path/next-dir
# ansistrano_shared_files:
#   - my-file.txt
#   - path/to/file.txt
ansistrano_shared_paths:
  - var/log
  - public/spool

# Deployment strategy
ansistrano_deploy_via: git # Method used to deliver the code to the server. Options are copy, rsync, git, svn, s3 or download

# Variables used in the Git deployment strategy
# ansistrano_git_repo: "git@github.com:rgsystemes/rgsupv-core.git" # Location of the git repository
# ansistrano_git_branch: "{{ git_branch }}" # What version of the repository to check out. This can be the full 40-character SHA-1 hash, the literal string HEAD, a branch name, or a tag name
ansistrano_git_repo: "git@github.com:fidanf/rgsupv-core.git" # Location of the git repository
ansistrano_git_branch: "sf4-php73" # What version of the repository to check out. This can be the full 40-character SHA-1 hash, the literal string HEAD, a branch name, or a tag name
ansistrano_git_identity_key_path: "{{ playbook_dir }}/id_rsa" # If specified this file is copied over and used as the identity key for the git commands, path is relative to the playbook in which it is used

# Nginx vhost variables 
nginx_template_path: api.conf.j2
nginx_root: "{{ ansistrano_deploy_to }}/{{ ansistrano_current_dir }}/web"
nginx_name: api.beta-supervision.com
nginx_well_known_ip: 192.168.200.30
nginx_ssl_certificate_path: /mnt/gluster/ssl/{{ nginx_name }}/api.rg-supervision.com.chained.crt
nginx_ssl_certificate_key_path: /mnt/gluster/ssl/{{ nginx_name }}/api.rg-supervision.com.key
# nginx_ssl_trusted_certificate_path: /mnt/gluster/ssl/{{ nginx_name }}/api.rg-supervision.com.crt