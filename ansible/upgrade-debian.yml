---
# Debian 9 'stretch' upgrade playbook 
# Example command : 
# ansible-playbook upgrade-debian.yml -v --extra-vars "hosts=api01,api02"

- hosts: 
    - "{{ hosts | default('test') }}"
  become: true

  vars_prompt:
    - name: user
      prompt: Enter the main username for this host
      default: api
      private: no

  pre_tasks:

    - name: Print distribution information about target host(s)
      debug:
        msg: "Distribution family is : {{ ansible_distribution }}. Release name is : {{ ansible_distribution_release }}"
      failed_when:
        - ansible_facts['distribution'] is not match("Debian") or
          ansible_facts['distribution_release'] is not match("stretch") 

    - name: Ensure python3 is installed
      apt:
        name: python3
        state: present

    - name: Configure python interpreter to use v3 instead of v2.7
      file:
        src: /usr/bin/python3
        dest: /usr/bin/python
        state: link

  tasks:

    - name: Ensure the provided username exists
      shell: "id -u {{ user }}" # exit code is 1 if not found

    - name: Comment every line in the user's cron file
      shell: 'sed -i "s/^\*/#&/g" /var/spool/cron/crontabs/{{user}}'

    - name: Remove Elastic apt key
      file:
        path: /etc/apt/sources.list.d/elastic-6.x.list
        state: absent

    - name: Remove Datastax apt key
      file:
        path: /etc/apt/sources.list.d/datastax.list
        state: absent

    - name: Uninstall & purge extra libraries (libxml, libuv etc.)
      apt:
        name: ['libuv*', 'cmake']
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Ensure aptitude is present 
      apt:
        name: aptitude
        state: present

    - name: Uninstall filebeat
      apt:
        name: filebeat
        state: absent
        purge: yes

    - name: Remove previously installed PECL extensions
      pear:
        name: "{{ item }}"
        state: absent
      with_items:
        - apcu 
        - apcu_bc
        - pecl_http
        - propro
        - raphf
        - rdkafka
        - xdebug 
      ignore_errors: yes

    - name: Uninstall & purge PHP
      apt:
        name: php-*
        state: absent
        purge: yes

    - name: Cleanup PHP previous configuration folders and extensions
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - /etc/php5/
        - /etc/php/7.0/
        - /usr/lib/php/
        - /usr/lib/php5/
        - /usr/share/php/
        - /var/lib/php/

    - name: Delete composer
      file: 
        path: /usr/local/bin/composer
        state: absent

    - name: Create backup folder for nginx
      file:
        path: /home/ansible/nginx-sites/
        state: directory

    - name: Check if sites-available folder is present
      stat:
        path: /etc/nginx/sites-available
      register: nginx_sites

    - name: Backup nginx sites
      copy:
        remote_src: yes
        src: /etc/nginx/sites-available/
        dest: /home/ansible/nginx-sites/
      when: nginx_sites.stat.exists

    - name: Uninstall & purge Nginx
      apt:
        name: nginx* 
        state: absent
        purge: yes

    - name: Cleanup Nginx previous configuration folders
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - /var/www/html
        - /etc/nginx

    - name: Cleanup apt
      apt:
        autoremove: yes
        autoclean: yes

    - name: Update Debian mirrors
      replace:
        path: /etc/apt/sources.list
        regexp: "stretch"
        replace: "buster"
        backup: yes

    - name: Update packages list
      apt: 
        update_cache: yes

    - name: Upgrade packages
      apt: 
        upgrade: full
        force: yes

    - name: Check what the new version is
      shell: lsb_release -r | awk '{print $2}'
      changed_when: False
      register: new_release

    - name: Notify distribution version upgrade
      debug: msg="Debian has been upgraded from {{ ansible_lsb.release }} to {{ new_release.stdout }}"
      when: ansible_lsb.release != new_release.stdout

    - name: Reboot the server and wait for it to come back up
      reboot:

    - name: Wait for the system to become reachable
      wait_for_connection:

    - name: Verify update status
      shell: hostnamectl
      register: hostnamectl_output

    - name: Print registered output
      debug: 
        var: hostnamectl_output.stdout_lines