# -*- mode: ruby -*-
# vi: set ft=ruby :

# constants
PLUGINS = ['vagrant-hostmanager']
VAGRANTFILE_API_VERSION ||= "2"

# ensure vagrant-env is installed before attempting to load the .env file
unless Vagrant.has_plugin?('vagrant-env')
  puts "vagrant-env is missing and will be added. You may retry afterwards"
  system "vagrant plugin install vagrant-env"
  exit 0;
end

# requirements
require 'dotenv'
Vagrant.require_version '>=2.2.9'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Vagrant will require these plugins be installed and available for the project.
  # If the plugins are not available, it will attempt to automatically install them into the local project. 
  # https://www.vagrantup.com/docs/vagrantfile/vagrant_settings#config-vagrant-plugins 
  config.vagrant.plugins = PLUGINS

  # configure hostmanager plugin
  config.hostmanager.enabled = false
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = false
  config.hostmanager.include_offline = false

  # configure vbguest plugin
  config.vbguest.auto_update = false
  
  # enable env plugin
  config.env.enable
  Dotenv.load

  if !File.exists?(File.join(File.dirname(__FILE__), ENV['CONFIG_FILE']))
    puts "The YAML config file is missing!"
    abort
  end

  # configure ssh
  config.ssh.forward_agent = true
  config.ssh.insert_key = false
  config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key"]
  
  settings              = YAML.load_file(File.join(File.dirname(__FILE__), ENV['CONFIG_FILE']))
  servers               = settings['servers']
  ansible_pubkey_path   = File.expand_path(settings['ansible_pubkey_path'])
  ansible_privkey_path  = File.expand_path(settings['ansible_privkey_path'])

  if !File.exists?(ansible_pubkey_path) || !File.exists?(ansible_privkey_path)
    puts "Provided SSH keypair paths could not be resolved!"
    abort
  end

  if !servers || servers.empty?
    puts "No servers defined in #{ENV['CONFIG_FILE']} !"
    abort
  end
  
  # VMs
  servers.each do |srv|
    config.vm.define srv['name'] do |i|
      i.vm.box = srv['box']
      i.vm.box_version = srv['box_version']
      i.vm.hostname = srv['hostname'] ||= srv['name']
      i.vm.network "private_network", ip: srv['ip']
      i.vm.provider 'virtualbox' do |vb|
        vb.gui = false
        vb.name = srv['name']
        vb.customize ['modifyvm', :id, '--cpus', srv['cpus']]
        vb.customize ['modifyvm', :id, '--memory', srv['memory']]
        vb.customize ['modifyvm', :id, '--ostype', 'Debian_64']
        vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
        vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
      end
      i.trigger.after :up do |trigger|
        trigger.name = "vagrant-hostmanager"
        trigger.info = "Updating hosts configuration!"
        trigger.run = { inline: "vagrant hostmanager" }
      end
    end
  end

  config.vm.provision 'apt packages', type: 'shell' do |s|
    s.inline = <<-SHELL
      apt-get update
      apt-get install -y dos2unix telnet
    SHELL
  end

  config.vm.provision 'install python interpreter', type: 'shell', path: 'scripts/python.sh'

  config.vm.provision 'copy ssh keys', type: 'shell', run: 'once' do |s| 
    s.path = 'scripts/common.sh'
    s.privileged = false
    s.env = {
      "ANSIBLE_PRIVKEY_CONTENT" => File.read(ansible_privkey_path),
      "ANSIBLE_PRIVKEY_NAME" => ansible_privkey_path.split('/').last,
      "ANSIBLE_PUBKEY_CONTENT" => File.read(ansible_pubkey_path)
    }
  end

  config.trigger.after :destroy do |trigger|
    trigger.name = "vagrant-hostmanager"
    trigger.info = "Cleanup hosts configuration!"
    trigger.run = { inline: "vagrant hostmanager" }
  end
end
